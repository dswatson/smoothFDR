// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/FDRreg.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// rtgamma_once
double rtgamma_once(double shape, double rate, double lb, double ub);
static SEXP FDRreg_rtgamma_once_try(SEXP shapeSEXP, SEXP rateSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type shape(shapeSEXP );
        Rcpp::traits::input_parameter< double >::type rate(rateSEXP );
        Rcpp::traits::input_parameter< double >::type lb(lbSEXP );
        Rcpp::traits::input_parameter< double >::type ub(ubSEXP );
        double __result = rtgamma_once(shape, rate, lb, ub);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_rtgamma_once(SEXP shapeSEXP, SEXP rateSEXP, SEXP lbSEXP, SEXP ubSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_rtgamma_once_try(shapeSEXP, rateSEXP, lbSEXP, ubSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// rdirichlet_once
NumericVector rdirichlet_once(NumericVector alpha);
static SEXP FDRreg_rdirichlet_once_try(SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP );
        NumericVector __result = rdirichlet_once(alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_rdirichlet_once(SEXP alphaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_rdirichlet_once_try(alphaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// SoftLogitLoss
double SoftLogitLoss(arma::vec beta, arma::vec y, arma::mat X, double lambda = 0.0);
static SEXP FDRreg_SoftLogitLoss_try(SEXP betaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP );
        Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        double __result = SoftLogitLoss(beta, y, X, lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_SoftLogitLoss(SEXP betaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP lambdaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_SoftLogitLoss_try(betaSEXP, ySEXP, XSEXP, lambdaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// SoftLogitGradient
arma::vec SoftLogitGradient(arma::vec beta, arma::vec y, arma::mat X, double lambda = 0.0);
static SEXP FDRreg_SoftLogitGradient_try(SEXP betaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP );
        Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        arma::vec __result = SoftLogitGradient(beta, y, X, lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_SoftLogitGradient(SEXP betaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP lambdaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_SoftLogitGradient_try(betaSEXP, ySEXP, XSEXP, lambdaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// FDRregCPP
SEXP FDRregCPP(NumericVector z, const arma::mat& X, NumericVector M0, NumericVector MTot, const arma::mat& PriorPrecision, const arma::vec& PriorMean, int nmc, int nburn, double p0, const arma::vec& betaguess);
static SEXP FDRreg_FDRregCPP_try(SEXP zSEXP, SEXP XSEXP, SEXP M0SEXP, SEXP MTotSEXP, SEXP PriorPrecisionSEXP, SEXP PriorMeanSEXP, SEXP nmcSEXP, SEXP nburnSEXP, SEXP p0SEXP, SEXP betaguessSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type M0(M0SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type MTot(MTotSEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type PriorPrecision(PriorPrecisionSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type PriorMean(PriorMeanSEXP );
        Rcpp::traits::input_parameter< int >::type nmc(nmcSEXP );
        Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP );
        Rcpp::traits::input_parameter< double >::type p0(p0SEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type betaguess(betaguessSEXP );
        SEXP __result = FDRregCPP(z, X, M0, MTot, PriorPrecision, PriorMean, nmc, nburn, p0, betaguess);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_FDRregCPP(SEXP zSEXP, SEXP XSEXP, SEXP M0SEXP, SEXP MTotSEXP, SEXP PriorPrecisionSEXP, SEXP PriorMeanSEXP, SEXP nmcSEXP, SEXP nburnSEXP, SEXP p0SEXP, SEXP betaguessSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_FDRregCPP_try(zSEXP, XSEXP, M0SEXP, MTotSEXP, PriorPrecisionSEXP, PriorMeanSEXP, nmcSEXP, nburnSEXP, p0SEXP, betaguessSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// EmpiricalBayesFDRregCPP
SEXP EmpiricalBayesFDRregCPP(NumericVector z, const arma::mat& X, NumericVector M0, NumericVector M1, const arma::mat& PriorPrecision, const arma::vec& PriorMean, int nmc, int nburn, const arma::vec& betaguess);
static SEXP FDRreg_EmpiricalBayesFDRregCPP_try(SEXP zSEXP, SEXP XSEXP, SEXP M0SEXP, SEXP M1SEXP, SEXP PriorPrecisionSEXP, SEXP PriorMeanSEXP, SEXP nmcSEXP, SEXP nburnSEXP, SEXP betaguessSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type M0(M0SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type M1(M1SEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type PriorPrecision(PriorPrecisionSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type PriorMean(PriorMeanSEXP );
        Rcpp::traits::input_parameter< int >::type nmc(nmcSEXP );
        Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type betaguess(betaguessSEXP );
        SEXP __result = EmpiricalBayesFDRregCPP(z, X, M0, M1, PriorPrecision, PriorMean, nmc, nburn, betaguess);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_EmpiricalBayesFDRregCPP(SEXP zSEXP, SEXP XSEXP, SEXP M0SEXP, SEXP M1SEXP, SEXP PriorPrecisionSEXP, SEXP PriorMeanSEXP, SEXP nmcSEXP, SEXP nburnSEXP, SEXP betaguessSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_EmpiricalBayesFDRregCPP_try(zSEXP, XSEXP, M0SEXP, M1SEXP, PriorPrecisionSEXP, PriorMeanSEXP, nmcSEXP, nburnSEXP, betaguessSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// FullyBayesFDRregCPP
SEXP FullyBayesFDRregCPP(NumericVector z, const arma::mat& X, NumericVector M0, NumericVector M1, const arma::mat& PriorPrecision, const arma::vec& PriorMean, int nmc, int nburn, const arma::vec& betaguess);
static SEXP FDRreg_FullyBayesFDRregCPP_try(SEXP zSEXP, SEXP XSEXP, SEXP M0SEXP, SEXP M1SEXP, SEXP PriorPrecisionSEXP, SEXP PriorMeanSEXP, SEXP nmcSEXP, SEXP nburnSEXP, SEXP betaguessSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type M0(M0SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type M1(M1SEXP );
        Rcpp::traits::input_parameter< const arma::mat& >::type PriorPrecision(PriorPrecisionSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type PriorMean(PriorMeanSEXP );
        Rcpp::traits::input_parameter< int >::type nmc(nmcSEXP );
        Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP );
        Rcpp::traits::input_parameter< const arma::vec& >::type betaguess(betaguessSEXP );
        SEXP __result = FullyBayesFDRregCPP(z, X, M0, M1, PriorPrecision, PriorMean, nmc, nburn, betaguess);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_FullyBayesFDRregCPP(SEXP zSEXP, SEXP XSEXP, SEXP M0SEXP, SEXP M1SEXP, SEXP PriorPrecisionSEXP, SEXP PriorMeanSEXP, SEXP nmcSEXP, SEXP nburnSEXP, SEXP betaguessSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_FullyBayesFDRregCPP_try(zSEXP, XSEXP, M0SEXP, M1SEXP, PriorPrecisionSEXP, PriorMeanSEXP, nmcSEXP, nburnSEXP, betaguessSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// fl_dp
NumericVector fl_dp(NumericVector y, double lam);
RcppExport SEXP FDRreg_fl_dp(SEXP ySEXP, SEXP lamSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type lam(lamSEXP );
        NumericVector __result = fl_dp(y, lam);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fl_dp_weight
NumericVector fl_dp_weight(NumericVector y, NumericVector w, double lam);
RcppExport SEXP FDRreg_fl_dp_weight(SEXP ySEXP, SEXP wSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP );
        Rcpp::traits::input_parameter< double >::type lam(lamSEXP );
        NumericVector __result = fl_dp_weight(y, w, lam);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mysample
int mysample(NumericVector probs);
static SEXP FDRreg_mysample_try(SEXP probsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP );
        int __result = mysample(probs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_mysample(SEXP probsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_mysample_try(probsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// trapezoid
double trapezoid(NumericVector x, NumericVector y);
static SEXP FDRreg_trapezoid_try(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        double __result = trapezoid(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_trapezoid(SEXP xSEXP, SEXP ySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_trapezoid_try(xSEXP, ySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dnormix
NumericVector dnormix(NumericVector y, NumericVector weights, NumericVector mu, NumericVector tau2);
static SEXP FDRreg_dnormix_try(SEXP ySEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP );
        NumericVector __result = dnormix(y, weights, mu, tau2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_dnormix(SEXP ySEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_dnormix_try(ySEXP, weightsSEXP, muSEXP, tau2SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// marnormix
NumericVector marnormix(NumericVector y, NumericVector sigma2, NumericVector weights, NumericVector mu, NumericVector tau2);
static SEXP FDRreg_marnormix_try(SEXP ySEXP, SEXP sigma2SEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type sigma2(sigma2SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP );
        NumericVector __result = marnormix(y, sigma2, weights, mu, tau2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_marnormix(SEXP ySEXP, SEXP sigma2SEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_marnormix_try(ySEXP, sigma2SEXP, weightsSEXP, muSEXP, tau2SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// rnormix
NumericVector rnormix(int n, NumericVector weights, NumericVector mu, NumericVector tau2);
static SEXP FDRreg_rnormix_try(SEXP nSEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP );
        NumericVector __result = rnormix(n, weights, mu, tau2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_rnormix(SEXP nSEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_rnormix_try(nSEXP, weightsSEXP, muSEXP, tau2SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// draw_mixture_component
IntegerVector draw_mixture_component(NumericVector y, NumericVector sigma2, NumericVector weights, NumericVector mu, NumericVector tau2);
static SEXP FDRreg_draw_mixture_component_try(SEXP ySEXP, SEXP sigma2SEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type sigma2(sigma2SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP );
        IntegerVector __result = draw_mixture_component(y, sigma2, weights, mu, tau2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_draw_mixture_component(SEXP ySEXP, SEXP sigma2SEXP, SEXP weightsSEXP, SEXP muSEXP, SEXP tau2SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_draw_mixture_component_try(ySEXP, sigma2SEXP, weightsSEXP, muSEXP, tau2SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// PredictiveRecursionFDR
List PredictiveRecursionFDR(NumericVector z, IntegerVector sweeporder, NumericVector grid_x, NumericVector theta_guess, double mu0 = 0.0, double sig0 = 1.0, double nullprob = 0.95, double decay = -0.67);
static SEXP FDRreg_PredictiveRecursionFDR_try(SEXP zSEXP, SEXP sweeporderSEXP, SEXP grid_xSEXP, SEXP theta_guessSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP nullprobSEXP, SEXP decaySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type sweeporder(sweeporderSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type grid_x(grid_xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type theta_guess(theta_guessSEXP );
        Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP );
        Rcpp::traits::input_parameter< double >::type sig0(sig0SEXP );
        Rcpp::traits::input_parameter< double >::type nullprob(nullprobSEXP );
        Rcpp::traits::input_parameter< double >::type decay(decaySEXP );
        List __result = PredictiveRecursionFDR(z, sweeporder, grid_x, theta_guess, mu0, sig0, nullprob, decay);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_PredictiveRecursionFDR(SEXP zSEXP, SEXP sweeporderSEXP, SEXP grid_xSEXP, SEXP theta_guessSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP nullprobSEXP, SEXP decaySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_PredictiveRecursionFDR_try(zSEXP, sweeporderSEXP, grid_xSEXP, theta_guessSEXP, mu0SEXP, sig0SEXP, nullprobSEXP, decaySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// PredictiveRecursion_DifferentSigma
List PredictiveRecursion_DifferentSigma(NumericVector z, double mu0, NumericVector sig0, IntegerVector sweeporder, NumericVector grid_x, NumericVector theta_guess, double nullprob = 0.95, double decay = -0.67);
static SEXP FDRreg_PredictiveRecursion_DifferentSigma_try(SEXP zSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP sweeporderSEXP, SEXP grid_xSEXP, SEXP theta_guessSEXP, SEXP nullprobSEXP, SEXP decaySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type sig0(sig0SEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type sweeporder(sweeporderSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type grid_x(grid_xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type theta_guess(theta_guessSEXP );
        Rcpp::traits::input_parameter< double >::type nullprob(nullprobSEXP );
        Rcpp::traits::input_parameter< double >::type decay(decaySEXP );
        List __result = PredictiveRecursion_DifferentSigma(z, mu0, sig0, sweeporder, grid_x, theta_guess, nullprob, decay);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_PredictiveRecursion_DifferentSigma(SEXP zSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP sweeporderSEXP, SEXP grid_xSEXP, SEXP theta_guessSEXP, SEXP nullprobSEXP, SEXP decaySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_PredictiveRecursion_DifferentSigma_try(zSEXP, mu0SEXP, sig0SEXP, sweeporderSEXP, grid_xSEXP, theta_guessSEXP, nullprobSEXP, decaySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// GaussianConvolution
NumericVector GaussianConvolution(NumericVector x, NumericVector fx, double sigma);
static SEXP FDRreg_GaussianConvolution_try(SEXP xSEXP, SEXP fxSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type fx(fxSEXP );
        Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP );
        NumericVector __result = GaussianConvolution(x, fx, sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_GaussianConvolution(SEXP xSEXP, SEXP fxSEXP, SEXP sigmaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_GaussianConvolution_try(xSEXP, fxSEXP, sigmaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// eval_pr_dens
List eval_pr_dens(NumericVector z, double mu0, NumericVector sig0, NumericVector grid_x, NumericVector grid_theta);
static SEXP FDRreg_eval_pr_dens_try(SEXP zSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP grid_xSEXP, SEXP grid_thetaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type sig0(sig0SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type grid_x(grid_xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type grid_theta(grid_thetaSEXP );
        List __result = eval_pr_dens(z, mu0, sig0, grid_x, grid_theta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP FDRreg_eval_pr_dens(SEXP zSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP grid_xSEXP, SEXP grid_thetaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(FDRreg_eval_pr_dens_try(zSEXP, mu0SEXP, sig0SEXP, grid_xSEXP, grid_thetaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int FDRreg_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*rtgamma_once)(double,double,double,double)");
        signatures.insert("NumericVector(*rdirichlet_once)(NumericVector)");
        signatures.insert("double(*SoftLogitLoss)(arma::vec,arma::vec,arma::mat,double)");
        signatures.insert("arma::vec(*SoftLogitGradient)(arma::vec,arma::vec,arma::mat,double)");
        signatures.insert("SEXP(*FDRregCPP)(NumericVector,const arma::mat&,NumericVector,NumericVector,const arma::mat&,const arma::vec&,int,int,double,const arma::vec&)");
        signatures.insert("SEXP(*EmpiricalBayesFDRregCPP)(NumericVector,const arma::mat&,NumericVector,NumericVector,const arma::mat&,const arma::vec&,int,int,const arma::vec&)");
        signatures.insert("SEXP(*FullyBayesFDRregCPP)(NumericVector,const arma::mat&,NumericVector,NumericVector,const arma::mat&,const arma::vec&,int,int,const arma::vec&)");
        signatures.insert("int(*mysample)(NumericVector)");
        signatures.insert("double(*trapezoid)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*dnormix)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*marnormix)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*rnormix)(int,NumericVector,NumericVector,NumericVector)");
        signatures.insert("IntegerVector(*draw_mixture_component)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("List(*PredictiveRecursionFDR)(NumericVector,IntegerVector,NumericVector,NumericVector,double,double,double,double)");
        signatures.insert("List(*PredictiveRecursion_DifferentSigma)(NumericVector,double,NumericVector,IntegerVector,NumericVector,NumericVector,double,double)");
        signatures.insert("NumericVector(*GaussianConvolution)(NumericVector,NumericVector,double)");
        signatures.insert("List(*eval_pr_dens)(NumericVector,double,NumericVector,NumericVector,NumericVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP FDRreg_RcppExport_registerCCallable() { 
    R_RegisterCCallable("FDRreg", "FDRreg_rtgamma_once", (DL_FUNC)FDRreg_rtgamma_once_try);
    R_RegisterCCallable("FDRreg", "FDRreg_rdirichlet_once", (DL_FUNC)FDRreg_rdirichlet_once_try);
    R_RegisterCCallable("FDRreg", "FDRreg_SoftLogitLoss", (DL_FUNC)FDRreg_SoftLogitLoss_try);
    R_RegisterCCallable("FDRreg", "FDRreg_SoftLogitGradient", (DL_FUNC)FDRreg_SoftLogitGradient_try);
    R_RegisterCCallable("FDRreg", "FDRreg_FDRregCPP", (DL_FUNC)FDRreg_FDRregCPP_try);
    R_RegisterCCallable("FDRreg", "FDRreg_EmpiricalBayesFDRregCPP", (DL_FUNC)FDRreg_EmpiricalBayesFDRregCPP_try);
    R_RegisterCCallable("FDRreg", "FDRreg_FullyBayesFDRregCPP", (DL_FUNC)FDRreg_FullyBayesFDRregCPP_try);
    R_RegisterCCallable("FDRreg", "FDRreg_mysample", (DL_FUNC)FDRreg_mysample_try);
    R_RegisterCCallable("FDRreg", "FDRreg_trapezoid", (DL_FUNC)FDRreg_trapezoid_try);
    R_RegisterCCallable("FDRreg", "FDRreg_dnormix", (DL_FUNC)FDRreg_dnormix_try);
    R_RegisterCCallable("FDRreg", "FDRreg_marnormix", (DL_FUNC)FDRreg_marnormix_try);
    R_RegisterCCallable("FDRreg", "FDRreg_rnormix", (DL_FUNC)FDRreg_rnormix_try);
    R_RegisterCCallable("FDRreg", "FDRreg_draw_mixture_component", (DL_FUNC)FDRreg_draw_mixture_component_try);
    R_RegisterCCallable("FDRreg", "FDRreg_PredictiveRecursionFDR", (DL_FUNC)FDRreg_PredictiveRecursionFDR_try);
    R_RegisterCCallable("FDRreg", "FDRreg_PredictiveRecursion_DifferentSigma", (DL_FUNC)FDRreg_PredictiveRecursion_DifferentSigma_try);
    R_RegisterCCallable("FDRreg", "FDRreg_GaussianConvolution", (DL_FUNC)FDRreg_GaussianConvolution_try);
    R_RegisterCCallable("FDRreg", "FDRreg_eval_pr_dens", (DL_FUNC)FDRreg_eval_pr_dens_try);
    R_RegisterCCallable("FDRreg", "FDRreg_RcppExport_validate", (DL_FUNC)FDRreg_RcppExport_validate);
    return R_NilValue;
}
